generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id              String    @id @default(cuid())
  userId          String
  postId          String
  parentCommentId String?
  content         String
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @db.Timestamp(6)
  comments        Comment?  @relation("commentsTocomments", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  otherComments   Comment[] @relation("commentsTocomments")
  posts           Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes           Vote[]
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  title       String    @db.VarChar(255)
  content     String?
  url         String?   @db.VarChar(255)
  subbenditId String
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  comments    Comment[]
  subbendits  Subbendit @relation(fields: [subbenditId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes       Vote[]
}

model Subbendit {
  id             String          @id @default(cuid())
  name           String          @unique @db.VarChar(255)
  description    String?
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @db.Timestamp(6)
  posts          Post[]
  userSubbendits UserSubbendit[]
}

model UserSubbendit {
  userId      String
  subbenditId String
  subbendits  Subbendit @relation(fields: [subbenditId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, subbenditId])
}

model User {
  id             String          @id @default(cuid())
  name           String          @unique(map: "User_username_key") @db.VarChar(255)
  email          String          @unique @db.VarChar(255)
  emailVerified  DateTime?
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @db.Timestamp(6)
  image          String?
  accounts       Account[]
  comments       Comment[]
  posts          Post[]
  sessions       Session[]
  userSubbendits UserSubbendit[]
  votes          Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    String?
  commentId String?
  type      VoteType
  comments  Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts     Post?    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  TEXT
  LINK
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
